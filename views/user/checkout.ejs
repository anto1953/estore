<%- include('../partials/_userhead') %>
</head>
<body>
    <style>
        .order_summary {
    background: #f8f9fa;
    
    border-radius: 8px;
    border: 1px solid #ddd;
}

.order_list {
    list-style: none;
    padding: 0;
    margin-bottom: 20px;
}

.total_amount {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.place_order_btn {
    width: 100%;
    background-color: grey;
    color: white;
    padding: 15px;
    font-size: 16px;
    font-weight: bold;
    border-radius: 8px;
    border: none;
    cursor: pointer;
    transition: background-color 0.3s;
}

.place_order_btn:hover {
    background-color: #e61919;
}

        .product_details {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            padding: 15px;
            border-bottom: 1px solid #eee;
        }
        
        .product_image {
            width: 80px;
            height: 80px;
            object-fit: cover;
            margin-right: 15px;
            border-radius: 4px;
        }
        
        .product_info {
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }
        
        .product_info span {
            font-size: 14px;
            color: #333;
            margin-bottom: 4px;
        }

        .payment_method {
            margin-top: 30px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .payment_options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .payment_option {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .payment_option:hover {
            border-color: #ff2020;
        }

        .payment_option.selected {
            border-color: #ff2020;
            background-color: #fff1f1;
        }

        .payment_option input[type="radio"] {
            margin-right: 10px;
        }

        .total_amount {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .total_amount h5 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }

        .total_amount span {
            font-size: 20px;
            font-weight: bold;
            color: green;
        }

        .place_order_btn {
            display: block;
            width: 100%;
            padding: 15px;
            background: grey;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            margin-top: 30px;
            transition: background 0.3s ease;
        }

        .place_order_btn:hover {
            background: blue;
        }

        .address_selection {

            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
        }

        .address_cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .address_card {
            border: 2px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            background: white;
        }

        .address_card:hover {
            border-color: #ff2020;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .address_card.selected {
            border-color: #ff2020;
            background-color: #fff1f1;
        }

        .address_card input[type="radio"] {
            position: absolute;
            top: 20px;
            right: 20px;
        }

        .address_type {
            font-size: 12px;
            font-weight: 600;
            color: #666;
            text-transform: uppercase;
            margin-bottom: 10px;
            display: inline-block;
            background: #e9ecef;
            padding: 4px 8px;
            border-radius: 4px;
        }

        .address_details {
            margin-top: 10px;
        }

        .address_details p {
            margin: 5px 0;
            color: #333;
            line-height: 1.4;
        }

        .address_details .name {
            font-weight: 600;
            font-size: 16px;
            margin-bottom: 8px;
        }

        .address_details .street {
            color: #444;
        }

        .address_details .location {
            color: #666;
        }

        .address_details .phone {
            margin-top: 8px;
            color: #666;
        }

        .add_address_btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            border: 2px dashed #ddd;
            border-radius: 8px;
            color: #666;
            cursor: pointer;
            transition: all 0.3s ease;
            background: white;
            margin-top: 15px;
        }
    </style>

    <!-- Top Bar -->
    <div class="top-bar">
        <%- include('../partials/_usertopbar') %>
    </div>
    
    <!-- Slider Area -->
    <div class="slider-area">
        <div class="single-slider slider-height2 d-flex align-items-center" data-background="assets/img/hero/category.jpg">
            <div class="container">
                <div class="row">
                    <div class="col-xl-12">
                        <div class="hero-cap text-center">
                            <h2>Checkout</h2>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Checkout Area -->
<!-- Checkout Area -->
    <section class="checkout_area section_padding">
        <div class="checkoutContainer" style="width: 99%;">
            <div class="row">
                <!-- Billing Details and Address Selection -->
                <div class="col-lg-6">                
                    <!-- Address Selection -->
                    <div class="address_selection">
                        <h3>Choose Delivery Address</h3><a class="btn-secondary" style="color: white;margin-left:80%;" href="/addAddress">Add address</a>
                        <div class="address_cards">
                                <% user.addresses.forEach(address => { %>
                                <label class="address_card">
                                    <input type="radio" name="address" value="<%= address._id %>" />
                                    <span class="address_type"><%= address.type || 'Home' %></span>
                                    <div class="address_details">
                                        <p class="name"><%= address.name %> <%= address .lastName %></p>
                                        <p class="street"><%= address.street %></p>
                                        <p class="location">
                                            <%= address.city %>, <%= address.state %> <%= address.zipCode %><br>
                                            <%= address.country %>
                                        </p>
                                        <% if(address.phone) { %>
                                            <p class="phone">ðŸ“ž <%= address.phone %></p>
                                        <% } %>
                                    </div>
                                </label>
                            <% }) %>
                        </div>
                    </div>

                    <!-- Payment Method Selection -->
                    <div class="payment_method">
                        <h3>Select Payment Method</h3>
                        <div class="payment_options">
                            <label class="payment_option ">
                                <input disabled type="radio" name="payment_method" value="credit_card" />
                                <i class="fas fa-credit-card"></i>
                                Credit Card
                            </label>
                            <label class="payment_option">
                                <input type="radio" name="payment_method" value="cash_on_delivery" />
                                <i class="fas fa-money"></i> 
                                Cash on Delivery
                            </label>
                            
                            <label class="payment_option">
                                <input type="radio" name="payment_method" value="razorpay" id="razorpay_payment_option" />
                                <i class="fas fa-university"></i>
                                Online Payment
                            </label>
                        </div>
                    </div>
                </div>

                <div class="col-lg-6">
                    <div class="order_summary">
                        <h3>Order Summary</h3>
                        <ul class="order_list">
                            <% orderDetails.products.forEach(product => { %>
                                <li>
                                    <div class="product_details">
                                        <img src="  /uploads/<%= product.product.image[0] %>" alt="<%= product.product.pname %>" class="product_image" />
                                        <div class="product_info">
                                            <span class="product_name"><%= product.product.pname %></span> 
                                            <span class="product_quantity"><%= product.quantity %> x <%= product.price %></span>
                                            <span class="product_total">â‚¹<%= product.total %></span>
                                        </div>
                                    </div>
                                </li>
                            <% }) %>
                        </ul>
                        <div class="cupon_area ">
                            <div class="check_title">
                                <h2>Have a coupon? <a href="#"></a></h2>
                            </div>
                            <input style="margin-left: auto;" type="text" id="coupon_code" placeholder="Enter coupon code" />
                            <button class="tp_btn" id="apply_coupon">Apply Coupon</button>
                            <div id="discount_section" style="display: none;">
                                <p>Discount Applied: -<span id="discount_amount"> </span></p>
                                <!-- <p>Discounted Total: <span id="discounted_total"></span></p> -->
                            </div>
                            <p>Delivery charge: +<span id='Delivery_charge'><%= deliveryCharge %></span></p>

                        </div>
                        <div class="total_amount">
                            <h5>Total</h5>
                            <span id="total_price"> â‚¹ <%= orderDetails.totalPrice %></span>
                        </div>
                        <button type="submit" class="place_order_btn" id="place_order_btn" disabled>Place Order</button>
                    </div>
                </div>
            </div>
        </div>
    </section>


        <%- include('../partials/_footer') %>
        <%- include('../partials/_js') %>

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
        const deliveryCharge=document.getElementById('delivery_charge')
            // Add interactivity to payment options
            document.querySelectorAll('.payment_option').forEach(option => {
                option.addEventListener('click', function() {
                    // Remove selected class from all options
                    document.querySelectorAll('.payment_option').forEach(opt => {
                        opt.classList.remove('selected');
                    });
                    // Add selected class to clicked option
                    this.classList.add('selected');
                });
            });

            // const totalPrice=orderDetails.totalPrice;
            // console.log('totalprice',totalPrice);
            
            // const codOption = document.getElementById('cod_payment_option');
            // if (totalPrice > 1000) {
            //     console.log('>1000');
                
            //     codOption.disabled = true;

            //     Swal.fire({
            //     icon: 'info',
            //     title: 'Cash on Delivery Unavailable',
            //     text: 'Cash on Delivery is not available for orders above â‚¹1000. Please choose another payment method.',
            //     });
            // }

        let addressSelected = false;
        let paymentMethodSelected = false;

        // Enable/disable the Place Order button
        function togglePlaceOrderButton() {
            const placeOrderBtn = document.getElementById('place_order_btn');
            if (addressSelected && paymentMethodSelected) {
                placeOrderBtn.disabled = false;
            } else {
                placeOrderBtn.disabled = true;
            }
        }

        // Handle address selection
        document.querySelectorAll('.address_card').forEach(card => {
            card.addEventListener('click', function() {
                // Remove selected class from all cards
                document.querySelectorAll('.address_card').forEach(c => {
                    c.classList.remove('selected');
                });
                // Add selected class to clicked card
                this.classList.add('selected');
                // Check the radio input
                this.querySelector('input[type="radio"]').checked = true;
                addressSelected = this.querySelector('input[type="radio"]').value;
                togglePlaceOrderButton();
            });
        });

        // Handle payment method selection
        document.querySelectorAll('.payment_option input[type="radio"]').forEach(option => {
            option.addEventListener('click', function() {
                paymentMethodSelected = true;
                togglePlaceOrderButton();
            });
        });


    // Coupon code 
    document.getElementById('apply_coupon').addEventListener('click', async function () {
    const couponButton = document.getElementById('apply_coupon');
    const couponCodeInput = document.getElementById('coupon_code');
    const discountSection = document.getElementById('discount_section');
    const totalPriceElement = document.getElementById('total_price');
    let originalTotalPrice = parseFloat(`<%= orderDetails.totalPrice %>`.replace(/[^\d.]/g, '')); 

    // If "Remove Coupon" is clicked
    if (couponButton.innerText === "Remove Coupon") {
        discountSection.style.display = 'none'; // Hide discount details
        couponCodeInput.value = ''; // Clear coupon code input
        couponButton.innerText = "Apply Coupon"; // Change button back to "Apply Coupon"
        totalPriceElement.innerText = `â‚¹${originalTotalPrice.toFixed(2)}`; // Reset total price
        Swal.fire({
            icon: 'success',
            title: 'Coupon Removed',
            text: 'The coupon has been removed successfully.',
        });
        return;
    }

    // If "Apply Coupon" is clicked
    const couponCode = couponCodeInput.value.trim();

    if (!couponCode) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Please enter a coupon code.',
        });
        return;
    }
    try {
        const response = await fetch('/validateCoupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ couponCode }),
        });

        const data = await response.json();

        if (response.ok) {
            const discount = data.discount;
            let totalPrice = parseFloat(totalPriceElement.innerText.replace(/[^\d.]/g, '')); 
            const discountAmount = (totalPrice * discount) / 100;
            const discountedTotal = totalPrice - discountAmount;

            // Update UI with the applied discount
            discountSection.style.display = 'block';
            document.getElementById('discount_amount').innerText = discountAmount.toFixed(2);
            totalPriceElement.innerText = `â‚¹${discountedTotal.toFixed(2)}`;

            // Change button to "Remove Coupon"
            couponButton.innerText = "Remove Coupon";

            Swal.fire({
                icon: 'success',
                title: 'Coupon Applied',
                text: `You have received a discount of â‚¹${discountAmount.toFixed(2)}.`,
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Invalid Coupon',
                text: data.message || 'The coupon code is not valid.',
            });
        }
    } catch (error) {
        console.log(error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Something went wrong. Please try again later.',
        });
    }
});

    document.getElementById('place_order_btn').addEventListener('click', async function() {
        let paymentMethod=document.querySelector('input[name="payment_method"]:checked').value;
        const totalPriceElement = document.getElementById('total_price');
        let totalPrice = parseFloat(totalPriceElement.innerText.replace(/[^\d.]/g, ''));   
        totalPrice +=deliveryCharge     
        const discountAmountElement = document.getElementById('discount_amount');
        const discountAmount = parseFloat(discountAmountElement.textContent || discountAmountElement.innerText);
        console.log('Discount Amount:', discountAmount);
        console.log('paymentmethod',paymentMethod);
        

        if(paymentMethod==='cash_on_delivery' && totalPrice > 1000){
            Swal.fire({
                icon:'info',
                title:'Oops...',
                text:'Cash on Delivery is not available for orders above â‚¹1000. Please choose another payment method.'
            })
            return;
        }
                
        if (!addressSelected || !paymentMethod) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Please select both an address and a payment method!',
            });
        } else {

        if (paymentMethod == 'razorpay') {
            try {
                // Create Razorpay order on the server
                const response = await fetch('/placeOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        address: document.querySelector('input[name="address"]:checked').value,
                        totalPrice: totalPrice ,
                        payment_method: document.querySelector('input[name="payment_method"]:checked').value,
                        discountAmount:discountAmount,
                    }),                    
                });

                const data = await response.json();                
                 console.log('data',data);
                 
                if (!response.ok) {                    
                    throw new Error(data.message || 'Failed to create Razorpay order.');
                }
                const razorpayKeyId="<%= razorpayKeyId %>";
                
                // Razorpay payment options
                const options = {
                    key: razorpayKeyId,
                    amount: totalPrice * 100,
                    currency: "INR",
                    name: 'E-store',
                    description: 'Order Payment',
                    order_id: data.razorpayOrder.id,
                    handler: async function (razorpayResponse) {
                        console.log('responce',razorpayResponse);
                        
                        // Verify payment on the server
                        const verifyResponse = await fetch('/verifyPayment', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                razorpay_order_id: razorpayResponse.razorpay_order_id,
                                razorpay_payment_id: razorpayResponse.razorpay_payment_id,
                                razorpay_signature: razorpayResponse.razorpay_signature,
                                address: addressSelected,
                            }),
                        });

                        const verifyData = await verifyResponse.json();
                        console.log('verification ',verifyResponse);
                        
                        
                        if (verifyData.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Payment Successful!',
                                text: 'Your order has been placed successfully!',
                            }).then(() => {
                                window.location.href = '/cart'; // Redirect after successful order
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Payment Verification Failed',
                                text: verifyData.message || 'Please contact support.',
                            });
                        }
                    },
                    prefill: {
                        name: '<%= user.name %>', // Prefill user data (update dynamically)
                        email: '<%= user.email %>',
                        contact: '<%= user.phone %>',
                    },
                    theme: {
                        color: '#3399cc', // Customize Razorpay modal theme color
                    },
                };

                const rzp = new Razorpay(options);
                rzp.open();
            } catch (error) {
                console.log(error);
                
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: error.message,
                });
            }
        } else {
            try {
                const response = await fetch('/placeOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        address: document.querySelector('input[name="address"]:checked').value,
                        payment_method: document.querySelector('input[name="payment_method"]:checked').value,
                        totalPrice,discountAmount

                        
                    }),
                });
                console.log('responce',response);
                

                const data = await response.json();

                if (response.ok) {
                    Swal.fire({ 
                        icon: 'success',
                        title: 'Order Placed!',
                        text: 'Your order has been placed successfully!',
                    }).then(() => {
                        window.location.href = '/cart';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: data.message || 'Something went wrong.',
                    });
                }
            } catch (error) {
                console.log(error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'something error'
                });
            }
        }
    }});
    

    </script>
</body>
</html>
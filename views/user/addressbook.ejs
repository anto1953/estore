<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Address Book</title>
    <link href="https://fonts.gstatic.com" rel="preconnect">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Nunito:300,300i,400,400i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    
    <!-- Vendor CSS Files -->
    <link href="/userProfileAssets/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/userProfileAssets/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/userProfileAssets/vendor/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="/userProfileAssets/vendor/quill/quill.snow.css" rel="stylesheet">
    <link href="/userProfileAssets/vendor/quill/quill.bubble.css" rel="stylesheet">
    <link href="/userProfileAssets/vendor/remixicon/remixicon.css" rel="stylesheet">
    <link href="/userProfileAssets/vendor/simple-datatables/style.css" rel="stylesheet">
    
    <!-- Template Main CSS File -->
    <link href="/userProfileAssets/assets/css/style.css" rel="stylesheet">
    <%- include('../partials/_userhead') %>
    </head>
    <body>
        <!-- Top Bar -->
    <div class="top-bar">
        <%- include('../partials/_usertopbar') %>
    </div>
    
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <nav class="sidebar ">
                <%- include('../partials/_userProfilesidebar') %>
            </nav>
<body>
    <div class="addressbook_container">
        <div class="header">
            <h1>Address Book</h1>
            <a class="userProfileBtn" style="background-color: blue;" href="/addAddress" >Add New Address</a>
        </div>
        <div id="addressesGrid" class="addresses-grid">
            <!-- Addresses will be inserted here by JavaScript -->
            <% if (addresses && addresses.length > 0) { %>
                <% addresses.forEach(address => { %>
                    <div class="address-card <%= address.isDefault ? 'default' : '' %>">
                        <% if (address.isDefault) { %>
                            <span class="default-badge">Default</span>
                        <% } %>
                        <div><strong><%= address.name %></strong></div>
                        <div><%= address.phone %></div>
                        <div><%= address.street %></div>
                        <div><%= address.city %>, <%= address.state %> <%= address.zipCode %></div>
                        <div class="address-actions">
                            <a href="/editAddress/<%= address._id %>" class="userProfileBtn userProfileBtn-edit">Edit</a>
                            <% if (!address.isDefault) { %>
                                <button onclick="setDefaultAddress('<%= address._id %>')"  class="userProfileBtn userProfileBtn-default">Set as Default</button>
                                <button onclick="deleteAddress('<%= address._id %>')" class="userProfileBtn userProfileBtn-delete">Delete</button>
                            <% } %>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <p>No addresses found. Please add a new address.</p>
            <% } %>
        </div>
    </div>

    <script>
 function setDefaultAddress(id) {
    fetch(`/setDefaultAddress/${id}`, {
        method: 'POST'
    })
    .then(response => response.json())
    .then(result => {
        if (result.status === 'success') {
            Swal.fire('Success!', result.message, 'success')
            .then(()=>{
                window.location.href='/addressbook';
            }) 

            // Re-render addresses here if necessary
            renderAddresses();
        } else {
            Swal.fire('Error!', result.message, 'error');
        }
    });
}

function deleteAddress(id) {
    Swal.fire({
        title: "Are you sure?",
        text: "This action will delete the address permanently.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, delete it!"
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/deleteAddress/${id}`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(result => {
                if (result.status === 'success') {
                    Swal.fire({
                        title: 'Deleted!',
                        text: result.message,
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href="/addressbook"
                        renderAddresses();
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: result.message,
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            })
            .catch(error => {
                console.error("Error:", error);
                Swal.fire({
                    title: 'Error!',
                    text: 'Something went wrong. Please try again later.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            });
        }
    });
}




        let editingId = null;

        function renderAddresses() {
            const addressesGrid = document.getElementById('addressesGrid');
            addressesGrid.innerHTML = addresses.map(address => `
                <div class="address-card ${address.isDefault ? 'default' : ''}">
                    ${address.isDefault ? '<span class="default-badge">Default</span>' : ''}
                    <div><strong>${address.fullName}</strong></div>
                    <div>${address.phone}</div>
                    <div>${address.street}</div>
                    <div>${address.city}, ${address.state} ${address.zipCode}</div>
                    <div class="address-actions">
                        <button class="userProfileBtn userProfileBtn-edit" onclick="editAddress(${address.id})">Edit</button>
                        ${!address.isDefault ? 
                            `<button class="userProfileBtn userProfileBtn-default" onclick="setDefaultAddress(${address.id})">Set as Default</button>` 
                            : ''
                        }
                        ${!address.isDefault ? 
                            `<button class="userProfileBtn userProfileBtn-delete" onclick="deleteAddress(${address.id})">Delete</button>`
                            : ''
                        }
                    </div>
                </div>
            `).join('');
        } 

        

        function closeModal() {
            document.getElementById('addressModal').style.display = 'none';
            document.getElementById('addressForm').reset();
            editingId = null;
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('addressModal');
            if (event.target === modal) {
                closeModal();
            }
        }

        // Initial render
        renderAddresses();
    </script>
</body>
</html>